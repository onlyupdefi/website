import{B as f,g as w,s as y,i as p,e as h,f as g,h as k,j as O,k as L,H as m,l as E}from"./index-dda1ba02.js";import"./arco-aadab653.js";import"./vue-c077373c.js";class x extends f{constructor({callbackSelector:e,cause:r,data:n,extraData:c,sender:d,urls:t}){var i;super(r.shortMessage||"An error occurred while fetching for an offchain result.",{cause:r,metaMessages:[...r.metaMessages||[],(i=r.metaMessages)!=null&&i.length?"":[],"Offchain Gateway Call:",t&&["  Gateway URL(s):",...t.map(u=>`    ${w(u)}`)],`  Sender: ${d}`,`  Data: ${n}`,`  Callback selector: ${e}`,`  Extra data: ${c}`].flat()}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupError"})}}class M extends f{constructor({result:e,url:r}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${w(r)}`,`Response: ${y(e)}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupResponseMalformedError"})}}class R extends f{constructor({sender:e,to:r}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${r}`,`OffchainLookup sender address: ${e}`]}),Object.defineProperty(this,"name",{enumerable:!0,configurable:!0,writable:!0,value:"OffchainLookupSenderMismatchError"})}}function $(s,e){if(!p(s))throw new h({address:s});if(!p(e))throw new h({address:e});return s.toLowerCase()===e.toLowerCase()}const P="0x556f1830",S={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function D(s,{blockNumber:e,blockTag:r,data:n,to:c}){const{args:d}=g({data:n,abi:[S]}),[t,i,u,a,o]=d;try{if(!$(c,t))throw new R({sender:t,to:c});const l=await A({data:u,sender:t,urls:i}),{data:b}=await k(s,{blockNumber:e,blockTag:r,data:O([a,L([{type:"bytes"},{type:"bytes"}],[l,o])]),to:c});return b}catch(l){throw new x({callbackSelector:a,cause:l,data:n,extraData:o,sender:t,urls:i})}}async function A({data:s,sender:e,urls:r}){var c;let n=new Error("An unknown error occurred.");for(let d=0;d<r.length;d++){const t=r[d],i=t.includes("{sender}")||t.includes("{data}")?"GET":"POST",u=i==="POST"?{data:s,sender:e}:void 0;try{const a=await fetch(t.replace("{sender}",e).replace("{data}",s),{body:JSON.stringify(u),method:i});let o;if((c=a.headers.get("Content-Type"))!=null&&c.startsWith("application/json")?o=(await a.json()).data:o=await a.text(),!a.ok){n=new m({body:u,details:y(o.error)||a.statusText,headers:a.headers,status:a.status,url:t});continue}if(!E(o)){n=new M({result:o,url:t});continue}return o}catch(a){n=new m({body:u,details:a.message,url:t})}}throw n}export{A as ccipFetch,D as offchainLookup,S as offchainLookupAbiItem,P as offchainLookupSignature};
